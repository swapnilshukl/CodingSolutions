Question link- https://leetcode.com/explore/featured/card/may-leetcoding-challenge/536/week-3-may-15th-may-21st/3330/

Solution: class Solution {
public:
    int maxSubarraySumCircular(vector<int>& A) {
        
        
        int n=A.size(),sum=0,max_sum=A[0];
        for(int i=0;i<n;i++)
        {
            sum+=A[i];
            if(max_sum<sum)
                max_sum=sum;
            if(sum<0)
                sum=0;
        }
        return max_sum;
    }
    int maxSubarraySumCircular(vector<int>& A) {
        int max1=kadane(A),sum=0,flag=0;
        for(int i=0;i<A.size();i++)
        {
            if(A[i]>=0)
            {
                flag=1;
                break;
            }
        }
        if(flag==0)
            return max1;
            
        for(int i=0;i<A.size();i++)
        {
           sum+=A[i];
            A[i]=-A[i];
        }
        
        int max2=kadane(A);
        max2=sum+max2;
        return max(max1,max2);
        
    
    }
};

Time Complexity: O(N)
Space Complexity: O(1)
