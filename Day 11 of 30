Question Link- https://leetcode.com/explore/featured/card/may-leetcoding-challenge/535/week-2-may-8th-may-14th/3326/

Solution: Using dfs & backtracking.

void fill(vector<vector<int>>& image, int i, int j, int color, int newColor){
        if(i<0 || i>=image.size() || j<0 || j>=image[0].size() || image[i][j]!=color)
            return ;
        
        image[i][j]=newColor;
        fill(image, i+1, j, color, newColor);
        fill(image, i-1, j, color, newColor);
        fill(image, i, j+1, color, newColor);
        fill(image, i, j-1, color, newColor);
    }
    
    
    
    
    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int newColor) {
        
        if(image[sr][sc]==newColor)
            return image;
        
        fill(image, sr, sc, image[sr][sc], newColor);
        return image;
    }
